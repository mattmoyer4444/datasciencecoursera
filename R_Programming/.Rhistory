names(houseprice3)
str(houseprice3)
plot(houseprice3)
plot(houseprice3,
pch = 16,
col = "gray",
main = "House Price per Foot",
xlab = "Squarefoot",
ylab = "Price")
# Linear regression line
abline(lm(houseprice3$price ~ houseprice3$squarefoot),
col = "darkred",
lwd = 2)
# "locally weighted scatterplot smoothing"
lines(lowess (houseprice3$Squarefoot, houseprice3$Price),
col = "blue",
lwd = 2)
require(car)
scatterplot(houseprice3$price ~ houseprice3$squarefoot,
pch = 16,
col = "darkblue",
main = "House Price per Foot",
xlab = "Square Footage",
ylab = "House Price")
?datasets
datasets()
data()
data(airmiles)
airmiles
str(airmiles)
data(airmiles)
data(anscome)
data(anscombe)
str(anscombe)
str(airmiles)
View(anscombe)
rm(list = ls())
str(anscombe)
data()
data(airmiles)
airmiles
barplot(airmiles)
data(airquality)
airquality
heights <- tapply(airquality$Temp, airquality$Month, mean)
barplot(heights)
houses <- read.csv("C:\On Line Classes\R Programming\RData\\houseprice.csv", header = T)
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\houseprice.csv", header = T)
houses
heights <- tapply(houses$Price, houses$Sqarefoot, mean)
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\houseprice.csv", header = T)
houses
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\houseprice.csv", header = T)
houses
heights <- tapply(houses$Price, houses$Sqarefoot)
heights <- tapply(houses$Price, houses$Squarefoot)
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\houseprice3.csv", header = T)
houses
heights <- tapply(houses$price, houses$squarefoot)
barplot(heights)
barplot(main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100)
barplot(main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 10),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights)
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = F,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights)
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 20),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = T,       # No borders
xlim = c(0, 20),  # Scale from 0-100,
xlab = "House Cost")
heights <- tapply(houses$price, houses$squarefoot)
barplot(heights)
barplot(heights,
xlim = c(0, 20),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,)
barplot(heights,decreasing = T)
barplot(heights)
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = F,       # No borders
xlim = c(0, 20),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = F,       # No borders
xlim = c(0, 5),  # Scale from 0-100,
xlab = "House Cost")
heights <- tapply(airquality$Temp, airquality$Month, mean)
barplot(heights)
heights <- tapply(houses$price, houses$squarefoot, mean)
barplot(heights)
heights <- tapply(houses$price, houses$squarefoot, mean)
barplot(heights, main = "House Prices",)
barplot(heights, main = "House Prices",border = F,)
barplot(heights,
main = "House Prices",
border = F,
xlab = "House Cost",)
houses
barplot(heights,
main = "House Prices",
border = F,
ylab = "House Cost",
ylab = "Square Footage")
barplot(heights,
main = "House Prices",
border = F,
ylab = "House Cost",
xlab = "Square Footage")
require("datasets")
data(chickwts)
feeds <- table(chickwts$feed)
feeds
pie(feeds)
pie(feeds[order(feeds, decreasing = TRUE],
int.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
pie(feeds[order(feeds, decreasing = TRUE],
int.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
pie(feeds[order(feeds, decreasing = TRUE)],
int.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
warnings()
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
students <- read.csv("C:\\On Line Classes\\R Programming\\RData\\students.csv", header = T)
students <- read.csv("C:\\On Line Classes\\R Programming\\RData\\students.csv", header = T)
students
str(students)
students
pie(students)
pc <- table(students$numStudents)
students
pie(students)
View(students)
View(students)
View(students)
pie(pc)
pc
pie(pc)
pie(pc,init.angle = 90,)
pc <- table(students$age)
pc
pie(pc,init.angle = 90,)
pc <- table(students$numStudents)
str(students)
pc <- table(students$numStudents)
pc
pie(pc,init.angle = 90,)
View(houses)
x1 <- 0:10  # Assigns number 0 through 10 to x1
x1  # Prints contents of x1 in console
x2 <- 10:0  # Assigns number 10 through 0 to x2
x2
x3 <- seq(10)  # Counts from 1 to 10
x3
x4 <- seq(30, 0, by = -3)  # Counts down by 3
x4
x5 <- c(5, 4, 1, 6, 7, 2, 2, 3, 2, 8)  # Concatenate
x5
x6 <- scan()  # After running this command, go to console
x6 <- scan()  # After running this command, go to console
ls()  # List objects (same as Workspace viewer)
rm(list = ls())  # Clean up
students <- read.csv("C:\\On Line Classes\\R Programming\\RData\\students.csv", header = T)
students
str(students)
pc <- table(students$numStudents)
pc
pie(pc,init.angle = 90,)
pie(feeds[order(feeds, decreasing = TRUE)],
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
datasets()
datas()
data()
require(mtcars)
mtcars()
require(datasets)
data(mtcars)
mtcars
View(mtcars)
View(mtcars)
scatterplot()
hist(mtcars)
require("datasets")
data(lynx)  # Annual Canadian Lynx trappings 1821-1934
hist(lynx)
# Modify histogram
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
plot(mtcars)
data(faithful)
duration <- faithful$eruptions
waiting <- faithful$waiting
head(cbind(duration, waiting))
plot(duration, waiting,
xlab="Eruption Duration",
ylab="Time Waited")
abline(lm(waiting ~ duration))
ggplot(aes(x = dob_day), data = pf) +
geom_histogram() +
scale_x_discrete(breaks = 1:31)
library(ggthemes)
ggplot(aes(x = dob_day), data = pf) +
geom_histogram() +
scale_x_discrete(breaks = 1:31)
read.delim('Udacity R\\Udacity Datasets\\pseudo_facebook.tsv')
read.delim('Udacity R\\Udacity Datasets\\pseudo_facebook.tsv')
q()
getwd()
getwd()
myfunction <- function() {
x <- rnorm(100)
mean(x)
}
function()
exit
ls()
myfunction()
myfunction()
myfunction()
q()
getwd()
files <- list.files(specdata)
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
files <- list.files(/specdata)
files <- list.files()
files <- list.files(specdata/)
setwd(specdata)
setwd(/specdata)
setwd(\specdata)
files <- list.files("c://On Line Classes//CourseraDataScience//R_Programming//specdata)
files <- list.files("c://On Line Classes//CourseraDataScience//R_Programming//specdata)
files <- list.files("c://On Line Classes//CourseraDataScience//R_Programming//specdata")
install.packages(c("Rcpp", "rgl", "Rttf2pt1", "yaml"))
library("swirl", lib.loc="C:/Users/Matt/Documents/R/win-library/3.1")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_sqrt
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2))
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- c(num_vect <1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name = c(my_char, "Matt")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_datamy_na)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c([3], [5], [7])
c(3,5,7)
c([3,5,7])
[c(3,5,7)]
c([3,5,7])
c(3,5,7)
c[(3,5,7)]
c([3,5,7])
[c(3,5,7)]
info()
c[(3,5,7)]
c([3,5,7])
c(3,5,7)
[y] <- c(3,5,7)
y <- c(3,5,7)
c(x[3], x[5], x[7])
c(x[3,5,7])
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(bar)
names()
names(2)
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect
vect2
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(c(1:20), nrow=4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- "Bill", "Gina", "Kelly", "Sean"
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
merge_dir = "c://On Line Classes//CourseraDataScience//R_Programming//specdata"
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
mymergeddata = multmerge(merge_dir)
no_na <- mymergeddata[!is.na(mymergeddata)]
no_na
merge_dir = "c://On Line Classes//CourseraDataScience//R_Programming//specdata"
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
mymergeddata = multmerge(merge_dir)
View(mymergeddata)
View(mymergeddata)
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
mymergeddata = multmerge(merge_dir)
View(mymergeddata)
no_na <- mymergeddata[!is.na(mymergeddata)]
str(mymergeddata)
View(mymergeddata)
merge_dir = "c://On Line Classes//CourseraDataScience//R_Programming//specdata//"
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
mymergeddata = multmerge(merge_dir)
file_list = "c://On Line Classes//CourseraDataScience//R_Programming//specdata//"
file_list <- list.files()
list_of_files <- lapply(file_list, read.csv) # Read in each file
list_of_files <- lapply(file_list, read.csv(header=T)) # Read in each file
list_of_files <- lapply(file_list, read.csv(file_list, header=T)) # Read in each file
?read.csv
list_of_files <- lapply(file_list, read.csv(file_list, header=TRUE)) # Read in each file
file_list <- list.files()
list_of_files <- lapply(file_list, read.csv(file, header=TRUE)) # Read in each file
list_of_files <- lapply(file_list, read.csv(file_list, header=TRUE)) # Read in each file
colnames <- c("Date","sulfate","nitrate","ID")
filenames <- list.files(path = merge_dir)
for(i in filenames){
filepath <- file.path("merge_dir, paste(i, sep=","))
assign(i, read.table(filepath, header = TRUE, sep = ",", col.names=colnames))
}
}
colnames <- c("Date","sulfate","nitrate","ID")
filenames <- list.files(path = merge_dir)
for(i in filenames) {
filepath <- file.path("merge_dir, paste(i, sep=","))
assign(i, read.table(filepath, header = TRUE, sep = ",", col.names=colnames))
}
q()
