y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_sqrt
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2))
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- c(num_vect <1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name = c(my_char, "Matt")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_datamy_na)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c([3], [5], [7])
c(3,5,7)
c([3,5,7])
[c(3,5,7)]
c([3,5,7])
c(3,5,7)
c[(3,5,7)]
c([3,5,7])
[c(3,5,7)]
info()
c[(3,5,7)]
c([3,5,7])
c(3,5,7)
[y] <- c(3,5,7)
y <- c(3,5,7)
c(x[3], x[5], x[7])
c(x[3,5,7])
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(bar)
names()
names(2)
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect
vect2
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(c(1:20), nrow=4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- "Bill", "Gina", "Kelly", "Sean"
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
merge_dir = "c://On Line Classes//CourseraDataScience//R_Programming//specdata"
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
mymergeddata = multmerge(merge_dir)
no_na <- mymergeddata[!is.na(mymergeddata)]
no_na
merge_dir = "c://On Line Classes//CourseraDataScience//R_Programming//specdata"
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
mymergeddata = multmerge(merge_dir)
View(mymergeddata)
View(mymergeddata)
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
mymergeddata = multmerge(merge_dir)
View(mymergeddata)
no_na <- mymergeddata[!is.na(mymergeddata)]
str(mymergeddata)
View(mymergeddata)
merge_dir = "c://On Line Classes//CourseraDataScience//R_Programming//specdata//"
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
mymergeddata = multmerge(merge_dir)
file_list = "c://On Line Classes//CourseraDataScience//R_Programming//specdata//"
file_list <- list.files()
list_of_files <- lapply(file_list, read.csv) # Read in each file
list_of_files <- lapply(file_list, read.csv(header=T)) # Read in each file
list_of_files <- lapply(file_list, read.csv(file_list, header=T)) # Read in each file
?read.csv
list_of_files <- lapply(file_list, read.csv(file_list, header=TRUE)) # Read in each file
file_list <- list.files()
list_of_files <- lapply(file_list, read.csv(file, header=TRUE)) # Read in each file
list_of_files <- lapply(file_list, read.csv(file_list, header=TRUE)) # Read in each file
colnames <- c("Date","sulfate","nitrate","ID")
filenames <- list.files(path = merge_dir)
for(i in filenames){
filepath <- file.path("merge_dir, paste(i, sep=","))
assign(i, read.table(filepath, header = TRUE, sep = ",", col.names=colnames))
}
}
colnames <- c("Date","sulfate","nitrate","ID")
filenames <- list.files(path = merge_dir)
for(i in filenames) {
filepath <- file.path("merge_dir, paste(i, sep=","))
assign(i, read.table(filepath, header = TRUE, sep = ",", col.names=colnames))
}
q()
setwd("C:/git_projects/datasciencecoursera/R_Programming/ProgrammingAssignment3/ProgAssignment3-data")
outcome_data <- read.csv("outcome-of-care-measures.csv", header = TRUE)
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state)
View(outcome_data)
View(hospital_table)
state <- "TX"
hospital_state <- subset(hospital_table, hospital_table$State == state)
View(hospital_state)
?subset
hospital_state <- subset(hospital_table, hospital_table$State == state)
no_na_hospital <- hospital_state[complete.cases(hospital_state),]
View(no_na_hospital)
NA <- "Not Available"
no_na_hospital <- na.omit(no_na_hospital)
View(no_na_hospital)
in(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure    )
min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure    )
min(hospital_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure    )
no_na_hospital <- na.omit(no_na_hospital)
View(no_na_hospital)
no_na_hospital$State
no_na_hospital$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
min(no_na_hospital$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
min <- no_na_hospital$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
min
best<- function(state, outcome) {
## Read outcome data
outcome_data <- read.csv2("outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
outcome_data<-outcome_data[outcome_data$State==state,]
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')]<-sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack'){
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),"Hospital.Name"],n=1))
}
else if(outcome=='heart failure')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),"Hospital.Name"],n=1))
else if(outcome=='pneumonia')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia),"Hospital.Name"],n=1))
}
best("TX", "heart failure")
submit()
source(submitscript3.R)
source("submitscript3.R")
source("submitscript3.R")
pwd
pwd()
getwd()
setwd("C:/git_projects/datasciencecoursera/R_Programming/ProgrammingAssignment3/")
source("submitscript3.R")
submit()
submit()
submit()
submit()
best("TX", "heart failure")
best<- function(state, outcome) {
## Read outcome data
outcome_data <- read.csv2("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//ProgAssignment3-data//outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
outcome_data<-outcome_data[outcome_data$State==state,]
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')] <- sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack'){
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),"Hospital.Name"],n=1))
}
else if(outcome=='heart failure')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),"Hospital.Name"],n=1))
else if(outcome=='pneumonia')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia),"Hospital.Name"],n=1))
}
best("TX", "heart failure")
best<- function(state, outcome) {
## Read outcome data
outcome_data <- read.csv2("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//ProgAssignment3-data//outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
outcome_data<-outcome_data[outcome_data$State==state,]
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')] <- sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack'){
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),"Hospital.Name"],n=1))
}
else if(outcome=='heart failure')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),"Hospital.Name"],n=1))
else if(outcome=='pneumonia')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia),"Hospital.Name"],n=1))
}
best("TX", "heart failure")
best("IL", "heart failure")
best("IL", "heart attack")
outcome_data <- read.csv2("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//ProgAssignment3-data//outcome-of-care-measures.csv",sep=",",colClasses="character")
View(outcome_data)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv2("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//ProgAssignment3-data//outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
outcome_data<-outcome_data[outcome_data$State==state,]
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')] <- sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack') {
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),"Hospital.Name"], n=5))
}
else if(outcome=='heart failure')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),"Hospital.Name"], n=5))
else if(outcome=='pneumonia')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia),"Hospital.Name"], n=5))
}
rankhospital("MD", "heart failure", 5)
rankhospital("TX", "heart failure", 5)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv2("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//ProgAssignment3-data//outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
outcome_data<-outcome_data[outcome_data$State==state,]
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')] <- sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack') {
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),"Hospital.Name"], n=num))
}
else if(outcome=='heart failure')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),"Hospital.Name"], n=num))
else if(outcome=='pneumonia')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia),"Hospital.Name"], n=num))
}
rankhospital("TX", "heart failure", 5)
rankhospital("TX", "heart failure", 4)
?order
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv2("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//ProgAssignment3-data//outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
outcome_data<-outcome_data[outcome_data$State==state,]
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')] <- sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack') {
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),"Hospital.Name"], nrow=num))
}
else if(outcome=='heart failure')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),"Hospital.Name"], nrow=num))
else if(outcome=='pneumonia')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia),"Hospital.Name"], nrow=num))
}
rankhospital("TX", "heart failure", 4)
?head
outcome_data[3]
outcome_data[3,]
outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack[3,]
outcome_data[3,]
?as.character
rankhospital<- function(state, outcome,num) {
## Read outcome data
outcome_data <- read.csv2("outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
if(num=="best"){
num=1
desc=FALSE
}
else if(num=="worst"){
num=1
desc=TRUE
}
else if(is.numeric(num))
desc=FALSE
else
stop("invalid num")
outcome_data<-outcome_data[outcome_data$State==state,]
if(num>nrow(outcome_data))
return(NA)
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')]<-sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack'){
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
}
else if(outcome=='heart failure')
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
else if(outcome=='pneumonia')
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
}
rankhospital<- function(state, outcome,num) {
## Read outcome data
outcome_data <- read.csv2("outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
if(num=="best"){
num=1
desc=FALSE
}
else if(num=="worst"){
num=1
desc=TRUE
}
else if(is.numeric(num))
desc=FALSE
else
stop("invalid num")
outcome_data<-outcome_data[outcome_data$State==state,]
if(num>nrow(outcome_data))
return(NA)
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')]<-sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack'){
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
}
else if(outcome=='heart failure')
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
else if(outcome=='pneumonia')
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
}
rankhospital("TX", "heart failure", 4)
rankhospital<- function(state, outcome,num) {
## Read outcome data
outcome_data <- read.csv2("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//ProgAssignment3-data//outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
if(num=="best"){
num=1
desc=FALSE
}
else if(num=="worst"){
num=1
desc=TRUE
}
else if(is.numeric(num))
desc=FALSE
else
stop("invalid num")
outcome_data<-outcome_data[outcome_data$State==state,]
if(num>nrow(outcome_data))
return(NA)
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')]<-sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack'){
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
}
else if(outcome=='heart failure')
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
else if(outcome=='pneumonia')
as.character(tail(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_data$Hospital.Name,decreasing=desc),"Hospital.Name"],n=num),n=1))
}
rankhospital("TX", "heart failure", 4)
submit
submit()
source("submitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
x <- 4 in R
x <- 4
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
pwd
pwd()
f=getwd()
getwd()
read.cvs("hw1_data.csv")
read.csv("hw1_data.csv")
getwd()
setwd("C:\git_projects\datasciencecoursera\R_Programming\Quiz1")
setwd("C://git_project//datasciencecoursera//R_Programming//Quiz1")
setwd("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//Quiz1//hw1_data.csv")
setwd("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//Quiz1//hw1_data.csv")
setwd("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//Quiz1//hw1_data.csv")
?setqwd
?setwd
getwd()
setwd("C://git_projects//datasciencecoursera//R_Programming//ProgrammingAssignment3//Quiz1//hw1_data.csv")
