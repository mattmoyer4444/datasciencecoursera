best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (state %in%  outcome$State) {
stop("Invalid State")
}
## Return hospital name in that state with lowest 30-day death
## rate
}
?$in%
?in
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if !(state %in%  outcome$State) {
stop("Invalid State")
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (state !%in%  outcome$State) {
stop("Invalid State")
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if !(state %in%  outcome$State) {
stop("Invalid State")
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
`%ni%` <- Negate(`%in%`)
if (state %ni%  outcome$State) {
stop("Invalid State")
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX", "heart attack")
best("TL", "heart attack")
View(outcome)
outcomes <- c("heart attack", "pneumonia", "heart failure")
outcomes
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TL", "heart att")
best("TX", "heart att")
best("TX", "heart attack")
best("TL", "heart attack")
outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
heart_attack_mortality <- outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
heart_attack_mortality
lowest_heart_attack <- min(heart_attack_mortality)
lowest_heart_attack
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
if (outcome == "heart failure") {
heart_attack_mortality <- outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
lowest_heart_attack <- min(heart_attack_mortality)
}
}
best("TX", "heart failure")
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
if (outcome == "heart failure") {
heart_attack_mortality <- outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
return lowest_heart_attack <- min(heart_attack_mortality)
}
}
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
if (outcome == "heart failure") {
heart_attack_mortality <- outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
return( lowest_heart_attack <- min(heart_attack_mortality))
}
}
best("TX", "heart failure")
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
if (outcome == "heart failure") {
heart_attack_mortality <- outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
}
lowest_heart_attack <- min(heart_attack_mortality)
}
best("TX", "heart failure")
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
if (outcome == "heart failure") {
heart_attack_mortality <- outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
}
min(heart_attack_mortality)
}
best("TX", "heart failure")
?subset
state <- "TX"
subset(outcomes, outcomes$State == state)
subset(outcomes, select = State)
subset(outcomes, select = "State")
subset(outcome_data, select = State)
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
selected_state <- subset(outcome_data, select = state)
if (outcome == "heart failure") {
heart_attack_mortality <- outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
}
min(heart_attack_mortality)
}
best("TX", "heart failure")
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
state <- outcome_data$State
selected_state <- subset(outcome_data, select = state)
if (outcome == "heart failure") {
heart_attack_mortality <- outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
}
min(heart_attack_mortality)
}
best("TX", "heart failure")
selected_state <- subset(outcome_data, select = State:outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
selected_state <- subset(outcome_data, select = State:outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
selected_state <- subset(outcome_data, select = State)
sected_state
selected_state
View(selected_state)
selected_state <- subset(outcome_data, select = State:Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure        )
View(selected_state)
outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")]
new_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")]
new_table
View(new_table)
new_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
View(new_table)
hospital_table <- outcome_data[c("State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.Name")]
View(hospital_table)
min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
hospital_table <- outcome_data[c("State",
hospital_table <- outcome_data[c("State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.Name")]
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
hospital_name
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
View(outcome_data)
View(hospital_table)
hospital_table.has(TX)
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
subset(hospital_table, hospital_table$State == state)
# if (outcome == "heart failure" && state == ) {
#         best <- hospital_table
print(state)
}
min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
subset(hospital_table, hospital_table$State == state)
# if (outcome == "heart failure" && state == ) {
#         best <- hospital_table
state
}
min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
state <- "TX"
subset(hospital_table, hospital_table$State == state)
hospital_state <- subset(hospital_table, hospital_table$State == state)
View(hospital_state)
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state)
# if (outcome == "heart failure" && state == ) {
#         best <- hospital_table
}
hospital_state
#min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
best("TX", "heart failure")
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state)
# if (outcome == "heart failure" && state == ) {
#         best <- hospital_table
hospital_state
}
#min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
## rate
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state)
# if (outcome == "heart failure" && state == ) {
#         best <- hospital_table
return(hospital_state)
}
#min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
hospital_state
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure == min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
hospital_state
hospital_state <- subset(hospital_table, hospital_table$State == state, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
hospital_state
heart_failure_mortality_rate <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
hospital_table <- outcome_data[c("State", heart_failure_mortality_rate, "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
hospital_state
hospital_state <- subset(hospital_table, hospital_table$State == state, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure == min(heart_failure_mortality_rate))
hospital_state
?subset
hospital_table <- outcome_data[c("State", heart_failure_mortality_rate, "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state, heart_failure_mortality_rate == min_heart_failure_mortality_rate)
min_heart_failure_mortality_rate <- min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
heart_failure_mortality_rate <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
min_heart_failure_mortality_rate <- min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
min_heart_failure_mortality_rate <- min(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
hospital_table <- outcome_data[c("State", heart_failure_mortality_rate, "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state, heart_failure_mortality_rate == min_heart_failure_mortality_rate)
state <- "TX"
hospital_state <- subset(hospital_table, hospital_table$State == state, heart_failure_mortality_rate == min_heart_failure_mortality_rate)
hospital_state
new <- hospital_state
View(hospital_state)
View(hospital_table)
View(hospital_table)
View(new)
View(outcome_data)
heart_failure_mortality_rate <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
heart_failure_mortality_rate <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
min_heart_failure_mortality_rate <- min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
## Return hospital name in that state with lowest 30-day death
## rate
hospital_table <- outcome_data[c("State", heart_failure_mortality_rate, "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state)
# if (outcome == "heart failure" && state == ) {
#         best <- hospital_table
return(hospital_state)
}
}
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
heart_failure_mortality_rate <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
min_heart_failure_mortality_rate <- min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
## Return hospital name in that state with lowest 30-day death
## rate
hospital_table <- outcome_data[c("State", heart_failure_mortality_rate, "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state)
# if (outcome == "heart failure" && state == ) {
#         best <- hospital_table
return(hospital_state)
}
best("TX", "heart failure")
best <- function(state, outcome) {
## Define not in operator. Idea from Bill Venables
`%ni%` <- Negate(`%in%`)
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcomes <- c("heart attack", "pneumonia", "heart failure")
if (outcome %ni%  outcomes) {
stop("invalid outcome")
}
if (state %ni%  outcome_data$State) {
stop("invalid state")
}
min_heart_failure_mortality_rate <- min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
## Return hospital name in that state with lowest 30-day death
## rate
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
hospital_state <- subset(hospital_table, hospital_table$State == state)
# if (outcome == "heart failure" && state == ) {
#         best <- hospital_table
return(hospital_state)
}
best("TX", "heart failure")
min_heart_failure_mortality_rate <- min(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
min_heart_failure_mortality_rate <- min(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
min_heart_failure_mortality_rate <- min(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
View(outcome_data)
View(outcome_data)
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome_data)
?read.csv
outcome_data <- read.csv("outcome-of-care-measures.csv", header = TRUE)
View(outcome_data)
min_heart_failure_mortality_rate <- min(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
hospital_table <- outcome_data[c("State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.Name")]
View(hospital_table)
View(hospital_table)
