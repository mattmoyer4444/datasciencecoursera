View(chickwts)
house <- read.csv("C:\\On Line Classes\\R Programming\\RData\\house_barchart.csv", header = T)
house
plot(house$price)
data(house)
prices <- table(house$price)
prices
View(house)
feet <- table(house$squarefoot)
feet
house <- read.csv("C:\\On Line Classes\\R Programming\\RData\\house_barchart.csv", header = T)
house
prices <- table(house$price)
prices <- table(house$squarefoot)
prices
prices <- table(house$price)
prices
barplot(prices)
plot(house$price)
barplot(house$price)
table(chickwts$feed)
feed <- table(chickwts$feed)
barplot(feed)
barplot(feeds[order(feeds, decreasing = TRUE)])
feeds <- table(chickwts$feed)
barplot(feeds)
barplot(feeds[order(feeds, decreasing = TRUE)])
par(oma = c(1, 1, 1, 1))  # Sets outside margins: b, l, t, r
par(mar = c(4, 5, 2, 1))  # Sets plot margins
barplot(feeds[order(feeds)],
horiz  = TRUE,
las    = 1,  # las gives orientation of axis labels
col    = c("beige", "blanchedalmond", "bisque1", "bisque2", "bisque3", "bisque4"),
border = NA,  # No borders on bars
main   = "Frequencies of Different Feeds\nin chickwts Dataset",  # \n = line break
xlab   = "Number of Chicks")
barplot(house$price)
plot(chickwts$feed)
barplot(feeds)
barplot(feeds)
par(oma = c(1, 1, 1, 1))  # Sets outside margins: b, l, t, r
par(mar = c(4, 5, 2, 1))  # Sets plot margins
barplot(feeds[order(feeds)],
horiz  = TRUE,
las    = 1,  # las gives orientation of axis labels
col    = c("beige", "blanchedalmond", "bisque1", "bisque2", "bisque3", "bisque4"),
border = NA,  # No borders on bars
main   = "Frequencies of Different Feeds\nin chickwts Dataset",  # \n = line break
xlab   = "Number of Chicks")
sn <- read.csv("C:\\On Line Classes\\R Programming\\RData\\house_barchart.csv", header = T)
Squarefoot.Price <- table(sn$Price)  # Creates table from Site
barplot(Squarefoot.Price)  # Creates barplot in new window
? barplot  # For more information on customizing graph
barplot(Squarefoot.Price)  # Creates barplot in new window
sn <- read.csv("C:\\On Line Classes\\R Programming\\Ex_Files_UaR_R\\Exercise Files\\Ch02\\02_03\\social_network.csv", header = T)
sn <- read.csv("C:\\On Line Classes\\R Programming\\Ex_Files_UaR_R\\Exercise Files\\Ch03\\03_01\\social_network.csv", header = T)
sn <- read.csv("C:\\On Line Classes\\R Programming\\Ex_Files_UaR_R\\Exercise Files\\Ch03\\03_01\\social_network.csv", header = T)
site.freq <- table(sn$Site)  # Creates table from Site
barplot(site.freq)  # Creates barplot in new window
sn
barplot(site.freq[order(site.freq, decreasing = T)])
barplot(site.freq[order(site.freq)], horiz = T)
fbba <- c(rep("gray", 5),
rgb(59, 89, 152, maxColorValue = 255))
barplot(site.freq[order(site.freq)],
horiz = T,
col = fbba)
sn <- read.csv(C:\\On Line Classes\\R Programming\\RData\\house_barchart.csv", header = T)
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\house_barchart.csv", header = T)
house
houses
house.price <- table(sn$price)  # Creates table from Site
house.price <- table(house$price)  # Creates table from Site
house.price <- table(houses$price)  # Creates table from Site
barplot(house.price)  # Creates barplot in new window
sn <- read.csv("C:\\On Line Classes\\R Programming\\Ex_Files_UaR_R\\Exercise Files\\Ch03\\03_01\\social_network.csv", header = T)
sn
site.freq <- table(sn$Site)  # Creates table from Site
require(datasets)
require(datasets)
chickwts
data(chickwts)
chickwts
data(chickwts)
plot(chickwts$feed)
feeds <- table(chickwts$feed)
barplot(feeds)
barplot(feeds[order(feeds, decreasing = TRUE)])
par(oma = c(1, 1, 1, 1))  # Sets outside margins: b, l, t, r
par(mar = c(4, 5, 2, 1))  # Sets plot margins
barplot(feeds[order(feeds)],
horiz  = TRUE,
las    = 1,  # las gives orientation of axis labels
col    = c("beige", "blanchedalmond", "bisque1", "bisque2", "bisque3", "bisque4"),
border = NA,  # No borders on bars
main   = "Frequencies of Different Feeds\nin chickwts Dataset",  # \n = line break
xlab   = "Number of Chicks")
library()
search()
data()
install.packages("ggplot2")
library("ggplot2")
require("ggplot2")
vignette(package="gris")
houseprice3 <- read.csv("C:\\On Line Classes\\R Programming\\RData\\house_barchart.csv", header = T)
names(houseprice3)
str(houseprice3)
plot(houseprice3)
# Modified scatterplot
plot(houseprice3,
pch = 16,
col = "gray",
main = "House Price per Foot",
xlab = "Squarefoot",
ylab = "Price")
abline(lm(houseprice3$Price ~ houseprice3$Squarefoot),
col = "darkred",
lwd = 2)
abline(lm(houseprice3$price ~ houseprice3$Squarefoot),
col = "darkred",
lwd = 2)
abline(lm(houseprice3$price ~ houseprice3$squarefoot),
abline(lm(houseprice3$price ~ houseprice3$squarefoot),
col = "darkred",
lwd = 2)
install.packages("car")
require(car)
scatterplot(houseprice3$Price ~ houseprice3$Squarefoot,
pch = 16,
col = "darkblue",
main = "House Price per Foot",
xlab = "Square Footage",
ylab = "House Price")
names(houseprice3)
str(houseprice3)
plot(houseprice3)
plot(houseprice3,
pch = 16,
col = "gray",
main = "House Price per Foot",
xlab = "Squarefoot",
ylab = "Price")
abline(lm(houseprice3$price ~ houseprice3$squarefoot),
col = "darkred",
lwd = 2)
scatterplot(houseprice3$price ~ houseprice3$Squarefoot,
pch = 16,
col = "darkblue",
main = "House Price per Foot",
xlab = "Square Footage",
ylab = "House Price")
scatterplot(house_barplot$price ~ houseprice3$Squarefoot,
pch = 16,
col = "darkblue",
main = "House Price per Foot",
xlab = "Square Footage",
ylab = "House Price")
scatterplot(houseprice3$price ~ houseprice3$Squarefoot,
pch = 16,
col = "darkblue",
main = "House Price per Foot",
xlab = "Square Footage",
ylab = "House Price")
scatterplot(houseprice3$price ~ houseprice3$squarefoot,
pch = 16,
col = "darkblue",
main = "House Price per Foot",
xlab = "Square Footage",
ylab = "House Price")
houseprice3 <- read.csv("C:\\On Line Classes\\R Programming\\RData\\house_barchart.csv", header = T)
names(houseprice3)
str(houseprice3)
plot(houseprice3)
plot(houseprice3,
pch = 16,
col = "gray",
main = "House Price per Foot",
xlab = "Squarefoot",
ylab = "Price")
# Linear regression line
abline(lm(houseprice3$price ~ houseprice3$squarefoot),
col = "darkred",
lwd = 2)
# "locally weighted scatterplot smoothing"
lines(lowess (houseprice3$Squarefoot, houseprice3$Price),
col = "blue",
lwd = 2)
require(car)
scatterplot(houseprice3$price ~ houseprice3$squarefoot,
pch = 16,
col = "darkblue",
main = "House Price per Foot",
xlab = "Square Footage",
ylab = "House Price")
?datasets
datasets()
data()
data(airmiles)
airmiles
str(airmiles)
data(airmiles)
data(anscome)
data(anscombe)
str(anscombe)
str(airmiles)
View(anscombe)
rm(list = ls())
str(anscombe)
data()
data(airmiles)
airmiles
barplot(airmiles)
data(airquality)
airquality
heights <- tapply(airquality$Temp, airquality$Month, mean)
barplot(heights)
houses <- read.csv("C:\On Line Classes\R Programming\RData\\houseprice.csv", header = T)
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\houseprice.csv", header = T)
houses
heights <- tapply(houses$Price, houses$Sqarefoot, mean)
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\houseprice.csv", header = T)
houses
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\houseprice.csv", header = T)
houses
heights <- tapply(houses$Price, houses$Sqarefoot)
heights <- tapply(houses$Price, houses$Squarefoot)
houses <- read.csv("C:\\On Line Classes\\R Programming\\RData\\houseprice3.csv", header = T)
houses
heights <- tapply(houses$price, houses$squarefoot)
barplot(heights)
barplot(main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100)
barplot(main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 10),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights)
barplot(heights,
main = "House Prices",
horiz = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
horiz = F,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights)
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 100),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = NA,       # No borders
xlim = c(0, 20),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = T,       # No borders
xlim = c(0, 20),  # Scale from 0-100,
xlab = "House Cost")
heights <- tapply(houses$price, houses$squarefoot)
barplot(heights)
barplot(heights,
xlim = c(0, 20),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,)
barplot(heights,decreasing = T)
barplot(heights)
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = F,       # No borders
xlim = c(0, 20),  # Scale from 0-100,
xlab = "House Cost")
barplot(heights,
main = "House Prices",
vert = T,         # Horizontal
border = F,       # No borders
xlim = c(0, 5),  # Scale from 0-100,
xlab = "House Cost")
heights <- tapply(airquality$Temp, airquality$Month, mean)
barplot(heights)
heights <- tapply(houses$price, houses$squarefoot, mean)
barplot(heights)
heights <- tapply(houses$price, houses$squarefoot, mean)
barplot(heights, main = "House Prices",)
barplot(heights, main = "House Prices",border = F,)
barplot(heights,
main = "House Prices",
border = F,
xlab = "House Cost",)
houses
barplot(heights,
main = "House Prices",
border = F,
ylab = "House Cost",
ylab = "Square Footage")
barplot(heights,
main = "House Prices",
border = F,
ylab = "House Cost",
xlab = "Square Footage")
require("datasets")
data(chickwts)
feeds <- table(chickwts$feed)
feeds
pie(feeds)
pie(feeds[order(feeds, decreasing = TRUE],
int.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
pie(feeds[order(feeds, decreasing = TRUE],
int.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
pie(feeds[order(feeds, decreasing = TRUE)],
int.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
warnings()
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
students <- read.csv("C:\\On Line Classes\\R Programming\\RData\\students.csv", header = T)
students <- read.csv("C:\\On Line Classes\\R Programming\\RData\\students.csv", header = T)
students
str(students)
students
pie(students)
pc <- table(students$numStudents)
students
pie(students)
View(students)
View(students)
View(students)
pie(pc)
pc
pie(pc)
pie(pc,init.angle = 90,)
pc <- table(students$age)
pc
pie(pc,init.angle = 90,)
pc <- table(students$numStudents)
str(students)
pc <- table(students$numStudents)
pc
pie(pc,init.angle = 90,)
View(houses)
x1 <- 0:10  # Assigns number 0 through 10 to x1
x1  # Prints contents of x1 in console
x2 <- 10:0  # Assigns number 10 through 0 to x2
x2
x3 <- seq(10)  # Counts from 1 to 10
x3
x4 <- seq(30, 0, by = -3)  # Counts down by 3
x4
x5 <- c(5, 4, 1, 6, 7, 2, 2, 3, 2, 8)  # Concatenate
x5
x6 <- scan()  # After running this command, go to console
x6 <- scan()  # After running this command, go to console
ls()  # List objects (same as Workspace viewer)
rm(list = ls())  # Clean up
students <- read.csv("C:\\On Line Classes\\R Programming\\RData\\students.csv", header = T)
students
str(students)
pc <- table(students$numStudents)
pc
pie(pc,init.angle = 90,)
pie(feeds[order(feeds, decreasing = TRUE)],
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,
clockwise = TRUE,
col = c("seashell","cadetblue2","lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
datasets()
datas()
data()
require(mtcars)
mtcars()
require(datasets)
data(mtcars)
mtcars
View(mtcars)
View(mtcars)
scatterplot()
hist(mtcars)
require("datasets")
data(lynx)  # Annual Canadian Lynx trappings 1821-1934
hist(lynx)
# Modify histogram
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
plot(mtcars)
data(faithful)
duration <- faithful$eruptions
waiting <- faithful$waiting
head(cbind(duration, waiting))
plot(duration, waiting,
xlab="Eruption Duration",
ylab="Time Waited")
abline(lm(waiting ~ duration))
ggplot(aes(x = dob_day), data = pf) +
geom_histogram() +
scale_x_discrete(breaks = 1:31)
library(ggthemes)
ggplot(aes(x = dob_day), data = pf) +
geom_histogram() +
scale_x_discrete(breaks = 1:31)
read.delim('Udacity R\\Udacity Datasets\\pseudo_facebook.tsv')
read.delim('Udacity R\\Udacity Datasets\\pseudo_facebook.tsv')
q()
q()
source("C:\\On Line Classes\\CourseraDataScience\\R_Programming\\pollutantmean.R")
q()
setwd("c://On Line Classes//CourseraDataScience//R_Programming//specdata")
file_list <- list.files()
file_list
for (i in file_list){
  # if the merged dataset doesn't exist, create it
  if (!exists("dataset")){
    dataset <- read.table(i, header=TRUE, sep="\t", na="NA")
  }
  # if the merged dataset does exist, append to it
  if (exists("dataset")){
    temp_dataset <-read.table(i, header=TRUE, sep="\t", na="NA")
    dataset<-rbind(dataset, temp_dataset)
    rm(temp_dataset)
  }
}
dataset
str(dataset)
x[!is.na(dataset)]
dataset[!is.na(dataset)]
dataset[!is.na(dataset$sulfide)]
dataset
path = setwd("c://On Line Classes//CourseraDataScience//R_Programming//specdata")
mydata1 = read.csv(path, header=T)
path = setwd("c://On Line Classes//CourseraDataScience//R_Programming//specdata")
path = setwd("c://On Line Classes//CourseraDataScience//R_Programming//specdata")
mydata1 = read.csv(path, header=T)
merge_dir = "c://On Line Classes//CourseraDataScience//R_Programming//specdata//"
##define column names for the csv files
colnames <- c("Date","sulfate","nitrate","ID")
##create filenames object that lists the csv files in a folder
filenames <- list.files(path = merge_dir)
##run loop that imports each csv file in the folder, creates a dataframe, assigns the filename to the dataframe, and adds column names
for(i in filenames) {
  filepath <- file.path("merge_dir, paste(i, sep=","))
  assign(i, read.table(filepath, header = TRUE, sep = ",", col.names=colnames))
}
merge_dir = "c://On Line Classes//CourseraDataScience//R_Programming//specdata//"
##define column names for the csv files
colnames <- c("Date","sulfate","nitrate","ID")
##create filenames object that lists the csv files in a folder
filenames <- list.files(path = merge_dir)
##run loop that imports each csv file in the folder, creates a dataframe, assigns the filename to the dataframe, and adds column names
for(i in filenames) {
  filepath <- file.path("merge_dir, paste(i, sep=","))
  assign(i, read.table(filepath, header = TRUE, sep = ",", col.names=colnames))
}
q()
